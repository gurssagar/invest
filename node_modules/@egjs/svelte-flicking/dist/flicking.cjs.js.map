{"version":3,"file":"flicking.cjs.js","sources":["../src/PanelManager.ts","../src/SvelteRenderer.ts","../src/SvelteElementProvider.ts","../src/flicking.svelte","../src/Flicking.js","../src/flicking-panel.svelte","../src/index.umd.ts"],"sourcesContent":["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport SvelteFlickingPanel from \"./SvelteFlickingPanel\";\n\nclass PanelManager {\n  public panels: Record<string, any>;\n  public dirty: boolean;\n\n  public constructor() {\n    this.panels = {};\n    this.dirty = false;\n  }\n\n  public add(panel: SvelteFlickingPanel) {\n    this.panels[panel.id] = panel;\n    this.dirty = true;\n  }\n\n  public remove(id: string) {\n    delete this.panels[id];\n    this.dirty = true;\n  }\n\n  public get(id: string) {\n    return this.panels[id];\n  }\n}\n\nexport default PanelManager;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"@egjs/component\";\nimport { ExternalRenderer, getFlickingAttached, PanelOptions, RendererOptions } from \"@egjs/flicking\";\n\nimport SvelteFlickingPanel from \"./SvelteFlickingPanel\";\nimport SvelteElementProvider from \"./SvelteElementProvider\";\n\nexport interface SvelteRendererOptions extends RendererOptions {\n  getSlots(children: HTMLElement[]): SvelteFlickingPanel[];\n  renderEmitter: Component<{ render: void }>;\n  forceUpdate(): void;\n}\n\nclass SvelteRenderer extends ExternalRenderer {\n  private _getSlots: SvelteRendererOptions[\"getSlots\"];\n  private _renderEmitter: SvelteRendererOptions[\"renderEmitter\"];\n  private _forceUpdate: SvelteRendererOptions[\"forceUpdate\"];\n\n  public constructor(options: SvelteRendererOptions) {\n    super(options);\n\n    this._getSlots = options.getSlots;\n    this._renderEmitter = options.renderEmitter;\n    this._forceUpdate = options.forceUpdate;\n  }\n\n  public async render() {\n    const flicking = getFlickingAttached(this._flicking);\n    const strategy = this._strategy;\n\n    strategy.updateRenderingPanels(flicking);\n    strategy.renderPanels(flicking);\n\n    return new Promise<void>(resolve => {\n      this._renderEmitter.once(\"render\", () => {\n        this._afterRender();\n        resolve();\n      });\n      this._applyPanelOrder();\n      this._forceUpdate();\n    });\n  }\n\n  public async forceRenderAllPanels() {\n    await super.forceRenderAllPanels();\n\n    return new Promise<void>(resolve => {\n      this._renderEmitter.once(\"render\", resolve);\n      this._forceUpdate();\n    });\n  }\n\n  protected _collectPanels() {\n    const flicking = getFlickingAttached(this._flicking);\n    const panelComponents = this._getSlots(flicking.camera.children);\n\n    this._panels = this._strategy.collectPanels(flicking, panelComponents);\n  }\n\n  protected _createPanel(externalComponent: SvelteFlickingPanel, options: PanelOptions) {\n    return this._strategy.createPanel(externalComponent, options);\n  }\n\n  private _applyPanelOrder() {\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = this._panels;\n    const renderingIndexes = this._strategy.getRenderingIndexesByOrder(flicking);\n\n    if (!flicking.virtualEnabled) {\n      renderingIndexes.forEach((panelIndex, idx) => {\n        const panel = panels[panelIndex];\n\n        (panel.elementProvider as SvelteElementProvider).setOrder(idx);\n      });\n    } else {\n      renderingIndexes.forEach((panelIndex, idx) => {\n        const panel = panels[panelIndex];\n\n        panel.element.style.order = idx.toString();\n      });\n    }\n  }\n}\n\nexport default SvelteRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport SvelteFlickingPanel from \"./SvelteFlickingPanel\";\n\nclass SvelteElementProvider {\n  private _el: SvelteFlickingPanel;\n\n  public get element() { return this._el.nativeElement(); }\n  public get rendered() { return this._el.rendered(); }\n\n  public constructor(el: SvelteFlickingPanel) {\n    this._el = el;\n  }\n\n  public show() {\n    this._el.show();\n  }\n\n  public hide() {\n    this._el.hide();\n  }\n\n  public setOrder(val: number) {\n    this._el.setOrder(val);\n  }\n}\n\nexport default SvelteElementProvider;\n","<script lang=\"ts\">\n  import {\n    onMount,\n    onDestroy,\n    afterUpdate,\n    createEventDispatcher,\n    setContext\n  } from \"svelte\";\n  import VanillaFlicking, {\n    VirtualRenderingStrategy,\n    NormalRenderingStrategy,\n    sync,\n    range,\n    toArray,\n    getDefaultCameraTransform,\n    Plugin,\n    Status,\n    EVENTS,\n    FlickingOptions\n  } from \"@egjs/flicking\";\n  import Component from \"@egjs/component\";\n  import ListDiffer, { DiffResult } from \"@egjs/list-differ\";\n\n  import PanelManager from \"./PanelManager\";\n  import SvelteRenderer, { SvelteRendererOptions } from \"./SvelteRenderer\";\n  import SvelteElementProvider from \"./SvelteElementProvider\";\n\n  export let cameraClass: string = \"\";\n  export let hideBeforeInit: boolean = false;\n  export let firstPanelSize: string | undefined = undefined;\n  export let options: Partial<FlickingOptions> = {};\n  export let plugins: Plugin[] = [];\n  export let status: Status | undefined = undefined;\n  export let vanillaFlicking: VanillaFlicking | null = null;\n\n  const dispatch = createEventDispatcher();\n  const panelManager = new PanelManager();\n  const pluginsDiffer = new ListDiffer<Plugin>([]);\n  const slotDiffer = new ListDiffer<HTMLElement>([], el => el.dataset.key!);\n  const renderEmitter = new Component<{ render: void }>();\n\n  let viewportEl: HTMLElement;\n  let cameraEl: HTMLElement;\n\n  let panelsPerView: number;\n  let isHorizontal: boolean;\n  let isHiddenBeforeInit: boolean;\n  let cameraTransform: { style?: string };\n\n  let diffResult: DiffResult<HTMLElement> | null = null;\n  let renderCounter = 0;\n\n  setContext(\"panels\", panelManager);\n\n  $: renderCounterComputed = renderCounter;\n  $: {\n    panelsPerView = options.panelsPerView ?? -1;\n    isHorizontal = options.horizontal != null ? options.horizontal : true;\n    cameraClass = `flicking-camera ${$$props.cameraClass ?? \"\"}`.trim();\n    isHiddenBeforeInit = hideBeforeInit && !(vanillaFlicking && vanillaFlicking.initialized);\n    cameraTransform = !(vanillaFlicking && vanillaFlicking.initialized) && firstPanelSize\n      ? { style: `transform: ${getDefaultCameraTransform(options.align, options.horizontal, firstPanelSize)}` }\n      : {};\n\n    // On props change\n    if (vanillaFlicking) {\n      const { virtual, ...newOptions } = options;\n\n      // Omit 'virtual', as it can't have any setter\n      for (const key in newOptions) {\n        if (key in vanillaFlicking && vanillaFlicking[key] !== newOptions[key]) {\n          vanillaFlicking[key] = newOptions[key];\n        }\n      }\n    }\n  }\n\n  onDestroy(() => {\n    vanillaFlicking && vanillaFlicking.destroy();\n  });\n\n  onMount(() => {\n    slotDiffer.update(toArray(cameraEl.children) as HTMLElement[]);\n\n    const rendererOptions: SvelteRendererOptions = {\n      getSlots,\n      renderEmitter,\n      forceUpdate,\n      align: options.align,\n      strategy: options.virtual && panelsPerView > 0\n        ? new VirtualRenderingStrategy()\n        : new NormalRenderingStrategy({\n          providerCtor: SvelteElementProvider\n        })\n    };\n\n    const flicking = new VanillaFlicking(viewportEl, {\n      ...options,\n      externalRenderer: new SvelteRenderer(rendererOptions)\n    });\n\n    vanillaFlicking = flicking;\n\n    bindEvents();\n    checkPlugins();\n\n    if (status) {\n      flicking.setStatus(status);\n    }\n  });\n\n  afterUpdate(() => {\n    if (!vanillaFlicking) return;\n\n    if (!vanillaFlicking.camera.element.style.transform) {\n      vanillaFlicking.camera.applyTransform();\n    }\n\n    if (options.panelsPerView != null) {\n      const firstPanel = vanillaFlicking.panels[0];\n      const styleToCheck = vanillaFlicking.horizontal\n         ? firstPanel.element.style.width\n         : firstPanel.element.style.height;\n\n      if (!styleToCheck) {\n        // Style not applied on first render\n        vanillaFlicking.renderer.updatePanelSize();\n      }\n    }\n\n    checkPlugins();\n\n    renderEmitter.trigger(\"render\");\n\n    if (!vanillaFlicking.initialized) return;\n\n    if (panelManager.dirty) {\n      vanillaFlicking.renderer.forceRenderAllPanels();\n      panelManager.dirty = false;\n      renderEmitter.once(\"render\", () => {\n        diffResult = slotDiffer.update(toArray(cameraEl.children) as HTMLElement[]);\n\n        // As added elements should always back in the slots list\n        sync(vanillaFlicking!, diffResult, [\n          ...diffResult.prevList.map(el => panelManager.get(el.dataset.key!)),\n          ...diffResult.added.map(idx => panelManager.get(diffResult!.list[idx].dataset.key!)),\n        ]);\n        vanillaFlicking!.renderer.render();\n      });\n    }\n  });\n\n  function getSlots(children: HTMLElement[]) {\n    return children.map(el => {\n      return panelManager.get(el.dataset.key!);\n    })\n  }\n\n  function bindEvents() {\n    Object.keys(EVENTS).forEach(key => {\n      const eventName = EVENTS[key];\n\n      vanillaFlicking!.on(eventName, e => {\n        dispatch(eventName, e);\n      });\n    });\n\n    vanillaFlicking!.once(EVENTS.READY, e => {\n      // Update reference to update computed properties\n      vanillaFlicking = e.currentTarget;\n    });\n  }\n\n  function checkPlugins() {\n    if (!vanillaFlicking) return;\n\n    const { list, added, removed, prevList } = pluginsDiffer.update(plugins);\n\n    vanillaFlicking.addPlugins(...added.map(index => list[index]));\n    vanillaFlicking.removePlugins(...removed.map(index => prevList[index]));\n  }\n\n  function forceUpdate() {\n    renderCounter += 1;\n  }\n</script>\n\n<svelte:options accessors={true} />\n<div class:flicking-viewport={true} bind:this={viewportEl} class:vertical={!isHorizontal} class:flicking-hidden={isHiddenBeforeInit} {...$$restProps}>\n  <div class={cameraClass} bind:this={cameraEl} {...cameraTransform}>\n    {#if panelsPerView > 0 && !!options.virtual}\n      {#each range(panelsPerView + 1) as _idx}\n        <div class={options.virtual.panelClass}></div>\n      {/each}\n    {:else}\n      <slot />\n    {/if}\n  </div>\n  <!-- Putting counter here to hide it from where it renderes -->\n  <slot data-render-count={renderCounterComputed} name=\"viewport\" />\n</div>\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { withFlickingMethods } from \"@egjs/flicking\";\n\nimport SvelteFlicking from \"./flicking.svelte\";\n\nif (SvelteFlicking.prototype) {\n  withFlickingMethods(SvelteFlicking.prototype, \"vanillaFlicking\");\n}\n\nexport default SvelteFlicking;\n","<script lang=\"ts\">\n  import {\n    onDestroy,\n    getContext\n  } from \"svelte\";\n  import { v4 } from \"uuid\";\n\n  import PanelManager from \"./PanelManager\";\n\n  const id = v4();\n  const sveltePanels = getContext(\"panels\") as PanelManager;\n\n  let hidden = false;\n  let order = Number.MAX_SAFE_INTEGER;\n  let element: HTMLElement;\n\n  sveltePanels.add({\n    show,\n    hide,\n    id,\n    setOrder(newOrder: number) {\n      order = newOrder;\n    },\n    rendered() {\n      return !hidden;\n    },\n    nativeElement() {\n      return element;\n    }\n  });\n\n  onDestroy(() => {\n    sveltePanels.remove(id);\n  });\n\n  export function show() {\n    hidden = false;\n  }\n\n  export function hide() {\n    hidden = true;\n  }\n</script>\n\n{#if !hidden}\n  <div bind:this={element} data-key={id} class=\"flicking-panel\" style=\"order: {order}\" {...$$restProps}>\n    <slot />\n  </div>\n{/if}\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"./Flicking\";\nimport FlickingPanel from \"./flicking-panel.svelte\";\n\n(Flicking as any).FlickingPanel = FlickingPanel;\n\nexport default Flicking;\n"],"names":["PanelManager","constructor","panels","dirty","add","panel","id","remove","get","SvelteRenderer","ExternalRenderer","options","_getSlots","getSlots","_renderEmitter","renderEmitter","_forceUpdate","forceUpdate","render","flicking","getFlickingAttached","_flicking","strategy","_strategy","updateRenderingPanels","renderPanels","Promise","resolve","once","_afterRender","_applyPanelOrder","forceRenderAllPanels","_collectPanels","panelComponents","camera","children","_panels","collectPanels","_createPanel","externalComponent","createPanel","renderingIndexes","getRenderingIndexesByOrder","virtualEnabled","forEach","panelIndex","idx","elementProvider","setOrder","element","style","order","toString","SvelteElementProvider","el","_el","nativeElement","rendered","show","hide","val","ctx","range","length","virtual","panelClass","insert","append","__rest","s","e","cameraEl","viewportEl","SvelteFlicking","prototype","withFlickingMethods","Flicking","FlickingPanel"],"mappings":"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"}