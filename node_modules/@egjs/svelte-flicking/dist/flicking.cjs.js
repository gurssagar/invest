/*
Copyright (c) NAVER Corp.
name: @egjs/svelte-flicking
license: MIT
author: NAVER Corp.
repository: https://github.com/naver/egjs-flicking/tree/master/packages/svelte-flicking
version: 4.10.7
*/
'use strict';

var VanillaFlicking = require('@egjs/flicking');
var svelte = require('svelte');
var Component = require('@egjs/component');
var ListDiffer = require('@egjs/list-differ');

function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
        const dirty = [];
        const length = $$scope.ctx.length / 32;
        for (let i = 0; i < length; i++) {
            dirty[i] = -1;
        }
        return dirty;
    }
    return -1;
}
function exclude_internal_props(props) {
    const result = {};
    for (const k in props)
        if (k[0] !== '$')
            result[k] = props[k];
    return result;
}
function compute_rest_props(props, keys) {
    const rest = {};
    keys = new Set(keys);
    for (const k in props)
        if (!keys.has(k) && k[0] !== '$')
            rest[k] = props[k];
    return rest;
}
function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function set_attributes(node, attributes) {
    // @ts-ignore
    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
    for (const key in attributes) {
        if (attributes[key] == null) {
            node.removeAttribute(key);
        }
        else if (key === 'style') {
            node.style.cssText = attributes[key];
        }
        else if (key === '__value') {
            node.value = node[key] = attributes[key];
        }
        else if (descriptors[key] && descriptors[key].set) {
            node[key] = attributes[key];
        }
        else {
            attr(node, key, attributes[key]);
        }
    }
}
function children(element) {
    return Array.from(element.childNodes);
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function
function flush() {
    const saved_component = current_component;
    do {
        // first, call beforeUpdate functions
        // and update components
        while (flushidx < dirty_components.length) {
            const component = dirty_components[flushidx];
            flushidx++;
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}

function get_spread_update(levels, updates) {
    const update = {};
    const to_null_out = {};
    const accounted_for = { $$scope: 1 };
    let i = levels.length;
    while (i--) {
        const o = levels[i];
        const n = updates[i];
        if (n) {
            for (const key in o) {
                if (!(key in n))
                    to_null_out[key] = 1;
            }
            for (const key in n) {
                if (!accounted_for[key]) {
                    update[key] = n[key];
                    accounted_for[key] = 1;
                }
            }
            levels[i] = n;
        }
        else {
            for (const key in o) {
                accounted_for[key] = 1;
            }
        }
    }
    for (const key in to_null_out) {
        if (!(key in update))
            update[key] = undefined;
    }
    return update;
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

class PanelManager {
  constructor() {
    this.panels = {};
    this.dirty = false;
  }

  add(panel) {
    this.panels[panel.id] = panel;
    this.dirty = true;
  }

  remove(id) {
    delete this.panels[id];
    this.dirty = true;
  }

  get(id) {
    return this.panels[id];
  }

}

class SvelteRenderer extends VanillaFlicking.ExternalRenderer {
  constructor(options) {
    super(options);
    this._getSlots = options.getSlots;
    this._renderEmitter = options.renderEmitter;
    this._forceUpdate = options.forceUpdate;
  }

  async render() {
    const flicking = VanillaFlicking.getFlickingAttached(this._flicking);
    const strategy = this._strategy;
    strategy.updateRenderingPanels(flicking);
    strategy.renderPanels(flicking);
    return new Promise(resolve => {
      this._renderEmitter.once("render", () => {
        this._afterRender();

        resolve();
      });

      this._applyPanelOrder();

      this._forceUpdate();
    });
  }

  async forceRenderAllPanels() {
    await super.forceRenderAllPanels();
    return new Promise(resolve => {
      this._renderEmitter.once("render", resolve);

      this._forceUpdate();
    });
  }

  _collectPanels() {
    const flicking = VanillaFlicking.getFlickingAttached(this._flicking);

    const panelComponents = this._getSlots(flicking.camera.children);

    this._panels = this._strategy.collectPanels(flicking, panelComponents);
  }

  _createPanel(externalComponent, options) {
    return this._strategy.createPanel(externalComponent, options);
  }

  _applyPanelOrder() {
    const flicking = VanillaFlicking.getFlickingAttached(this._flicking);
    const panels = this._panels;

    const renderingIndexes = this._strategy.getRenderingIndexesByOrder(flicking);

    if (!flicking.virtualEnabled) {
      renderingIndexes.forEach((panelIndex, idx) => {
        const panel = panels[panelIndex];
        panel.elementProvider.setOrder(idx);
      });
    } else {
      renderingIndexes.forEach((panelIndex, idx) => {
        const panel = panels[panelIndex];
        panel.element.style.order = idx.toString();
      });
    }
  }

}

class SvelteElementProvider {
  constructor(el) {
    this._el = el;
  }

  get element() {
    return this._el.nativeElement();
  }

  get rendered() {
    return this._el.rendered();
  }

  show() {
    this._el.show();
  }

  hide() {
    this._el.hide();
  }

  setOrder(val) {
    this._el.setOrder(val);
  }

}

/* src/flicking.svelte generated by Svelte v3.46.2 */

const get_viewport_slot_changes = dirty => ({
  "data-render-count": dirty[0] &
  /*renderCounterComputed*/
  256
});

const get_viewport_slot_context = ctx => ({
  "data-render-count":
  /*renderCounterComputed*/
  ctx[8]
});

function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[34] = list[i];
  return child_ctx;
} // (155:4) {:else}


function create_else_block(ctx) {
  let current;
  const default_slot_template =
  /*#slots*/
  ctx[19].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[18], null);
  return {
    c() {
      if (default_slot) default_slot.c();
    },

    m(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }

      current = true;
    },

    p(ctx, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] &
        /*$$scope*/
        262144)) {
          update_slot_base(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[18], !current ? get_all_dirty_from_scope(
          /*$$scope*/
          ctx[18]) : get_slot_changes(default_slot_template,
          /*$$scope*/
          ctx[18], dirty, null), null);
        }
      }
    },

    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },

    o(local) {
      transition_out(default_slot, local);
      current = false;
    },

    d(detaching) {
      if (default_slot) default_slot.d(detaching);
    }

  };
} // (151:4) {#if panelsPerView > 0 && !!options.virtual}


function create_if_block$1(ctx) {
  let each_1_anchor;
  let each_value = VanillaFlicking.range(
  /*panelsPerView*/
  ctx[4] + 1);
  let each_blocks = [];

  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }

  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }

      each_1_anchor = empty();
    },

    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }

      insert(target, each_1_anchor, anchor);
    },

    p(ctx, dirty) {
      if (dirty[0] &
      /*options, panelsPerView*/
      18) {
        each_value = VanillaFlicking.range(
        /*panelsPerView*/
        ctx[4] + 1);
        let i;

        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx, each_value, i);

          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }

        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }

        each_blocks.length = each_value.length;
      }
    },

    i: noop,
    o: noop,

    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching) detach(each_1_anchor);
    }

  };
} // (152:6) {#each range(panelsPerView + 1) as _idx}


function create_each_block(ctx) {
  let div;
  let div_class_value;
  return {
    c() {
      div = element("div");
      attr(div, "class", div_class_value =
      /*options*/
      ctx[1].virtual.panelClass);
    },

    m(target, anchor) {
      insert(target, div, anchor);
    },

    p(ctx, dirty) {
      if (dirty[0] &
      /*options*/
      2 && div_class_value !== (div_class_value =
      /*options*/
      ctx[1].virtual.panelClass)) {
        attr(div, "class", div_class_value);
      }
    },

    d(detaching) {
      if (detaching) detach(div);
    }

  };
}

function create_fragment$1(ctx) {
  let div1;
  let div0;
  let current_block_type_index;
  let if_block;
  let t;
  let current;
  const if_block_creators = [create_if_block$1, create_else_block];
  const if_blocks = [];

  function select_block_type(ctx, dirty) {
    if (
    /*panelsPerView*/
    ctx[4] > 0 && !!
    /*options*/
    ctx[1].virtual) return 0;
    return 1;
  }

  current_block_type_index = select_block_type(ctx);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let div0_levels = [{
    class:
    /*cameraClass*/
    ctx[0]
  },
  /*cameraTransform*/
  ctx[7]];
  let div0_data = {};

  for (let i = 0; i < div0_levels.length; i += 1) {
    div0_data = assign(div0_data, div0_levels[i]);
  }

  const viewport_slot_template =
  /*#slots*/
  ctx[19].viewport;
  const viewport_slot = create_slot(viewport_slot_template, ctx,
  /*$$scope*/
  ctx[18], get_viewport_slot_context);
  let div1_levels = [
  /*$$restProps*/
  ctx[9]];
  let div1_data = {};

  for (let i = 0; i < div1_levels.length; i += 1) {
    div1_data = assign(div1_data, div1_levels[i]);
  }

  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if_block.c();
      t = space();
      if (viewport_slot) viewport_slot.c();
      set_attributes(div0, div0_data);
      set_attributes(div1, div1_data);
      toggle_class(div1, "flicking-viewport", true);
      toggle_class(div1, "vertical", !
      /*isHorizontal*/
      ctx[5]);
      toggle_class(div1, "flicking-hidden",
      /*isHiddenBeforeInit*/
      ctx[6]);
    },

    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if_blocks[current_block_type_index].m(div0, null);
      /*div0_binding*/

      ctx[20](div0);
      append(div1, t);

      if (viewport_slot) {
        viewport_slot.m(div1, null);
      }
      /*div1_binding*/


      ctx[21](div1);
      current = true;
    },

    p(ctx, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx);

      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];

        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block.c();
        } else {
          if_block.p(ctx, dirty);
        }

        transition_in(if_block, 1);
        if_block.m(div0, null);
      }

      set_attributes(div0, div0_data = get_spread_update(div0_levels, [(!current || dirty[0] &
      /*cameraClass*/
      1) && {
        class:
        /*cameraClass*/
        ctx[0]
      }, dirty[0] &
      /*cameraTransform*/
      128 &&
      /*cameraTransform*/
      ctx[7]]));

      if (viewport_slot) {
        if (viewport_slot.p && (!current || dirty[0] &
        /*$$scope, renderCounterComputed*/
        262400)) {
          update_slot_base(viewport_slot, viewport_slot_template, ctx,
          /*$$scope*/
          ctx[18], !current ? get_all_dirty_from_scope(
          /*$$scope*/
          ctx[18]) : get_slot_changes(viewport_slot_template,
          /*$$scope*/
          ctx[18], dirty, get_viewport_slot_changes), get_viewport_slot_context);
        }
      }

      set_attributes(div1, div1_data = get_spread_update(div1_levels, [dirty[0] &
      /*$$restProps*/
      512 &&
      /*$$restProps*/
      ctx[9]]));
      toggle_class(div1, "flicking-viewport", true);
      toggle_class(div1, "vertical", !
      /*isHorizontal*/
      ctx[5]);
      toggle_class(div1, "flicking-hidden",
      /*isHiddenBeforeInit*/
      ctx[6]);
    },

    i(local) {
      if (current) return;
      transition_in(if_block);
      transition_in(viewport_slot, local);
      current = true;
    },

    o(local) {
      transition_out(if_block);
      transition_out(viewport_slot, local);
      current = false;
    },

    d(detaching) {
      if (detaching) detach(div1);
      if_blocks[current_block_type_index].d();
      /*div0_binding*/

      ctx[20](null);
      if (viewport_slot) viewport_slot.d(detaching);
      /*div1_binding*/

      ctx[21](null);
    }

  };
}

function instance$1($$self, $$props, $$invalidate) {
  let renderCounterComputed;
  const omit_props_names = ["cameraClass", "hideBeforeInit", "firstPanelSize", "options", "plugins", "status", "vanillaFlicking"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let {
    $$slots: slots = {},
    $$scope
  } = $$props;

  var __rest = this && this.__rest || function (s, e) {
    var t = {};

    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  };

  var _a, _b;

  let {
    cameraClass = ""
  } = $$props;
  let {
    hideBeforeInit = false
  } = $$props;
  let {
    firstPanelSize = undefined
  } = $$props;
  let {
    options = {}
  } = $$props;
  let {
    plugins = []
  } = $$props;
  let {
    status = undefined
  } = $$props;
  let {
    vanillaFlicking = null
  } = $$props;
  const dispatch = svelte.createEventDispatcher();
  const panelManager = new PanelManager();
  const pluginsDiffer = new ListDiffer([]);
  const slotDiffer = new ListDiffer([], el => el.dataset.key);
  const renderEmitter = new Component();
  let viewportEl;
  let cameraEl;
  let panelsPerView;
  let isHorizontal;
  let isHiddenBeforeInit;
  let cameraTransform;
  let diffResult = null;
  let renderCounter = 0;
  svelte.setContext("panels", panelManager);
  svelte.onDestroy(() => {
    vanillaFlicking && vanillaFlicking.destroy();
  });
  svelte.onMount(() => {
    slotDiffer.update(VanillaFlicking.toArray(cameraEl.children));
    const rendererOptions = {
      getSlots,
      renderEmitter,
      forceUpdate,
      align: options.align,
      strategy: options.virtual && panelsPerView > 0 ? new VanillaFlicking.VirtualRenderingStrategy() : new VanillaFlicking.NormalRenderingStrategy({
        providerCtor: SvelteElementProvider
      })
    };
    const flicking = new VanillaFlicking(viewportEl, Object.assign(Object.assign({}, options), {
      externalRenderer: new SvelteRenderer(rendererOptions)
    }));
    $$invalidate(10, vanillaFlicking = flicking);
    bindEvents();
    checkPlugins();

    if (status) {
      flicking.setStatus(status);
    }
  });
  svelte.afterUpdate(() => {
    if (!vanillaFlicking) return;

    if (!vanillaFlicking.camera.element.style.transform) {
      vanillaFlicking.camera.applyTransform();
    }

    if (options.panelsPerView != null) {
      const firstPanel = vanillaFlicking.panels[0];
      const styleToCheck = vanillaFlicking.horizontal ? firstPanel.element.style.width : firstPanel.element.style.height;

      if (!styleToCheck) {
        // Style not applied on first render
        vanillaFlicking.renderer.updatePanelSize();
      }
    }

    checkPlugins();
    renderEmitter.trigger("render");
    if (!vanillaFlicking.initialized) return;

    if (panelManager.dirty) {
      vanillaFlicking.renderer.forceRenderAllPanels();
      panelManager.dirty = false;
      renderEmitter.once("render", () => {
        diffResult = slotDiffer.update(VanillaFlicking.toArray(cameraEl.children)); // As added elements should always back in the slots list

        VanillaFlicking.sync(vanillaFlicking, diffResult, [...diffResult.prevList.map(el => panelManager.get(el.dataset.key)), ...diffResult.added.map(idx => panelManager.get(diffResult.list[idx].dataset.key))]);
        vanillaFlicking.renderer.render();
      });
    }
  });

  function getSlots(children) {
    return children.map(el => {
      return panelManager.get(el.dataset.key);
    });
  }

  function bindEvents() {
    Object.keys(VanillaFlicking.EVENTS).forEach(key => {
      const eventName = VanillaFlicking.EVENTS[key];
      vanillaFlicking.on(eventName, e => {
        dispatch(eventName, e);
      });
    });
    vanillaFlicking.once(VanillaFlicking.EVENTS.READY, e => {
      // Update reference to update computed properties
      $$invalidate(10, vanillaFlicking = e.currentTarget);
    });
  }

  function checkPlugins() {
    if (!vanillaFlicking) return;
    const {
      list,
      added,
      removed,
      prevList
    } = pluginsDiffer.update(plugins);
    vanillaFlicking.addPlugins(...added.map(index => list[index]));
    vanillaFlicking.removePlugins(...removed.map(index => prevList[index]));
  }

  function forceUpdate() {
    $$invalidate(17, renderCounter += 1);
  }

  function div0_binding($$value) {
    binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      cameraEl = $$value;
      $$invalidate(3, cameraEl);
    });
  }

  function div1_binding($$value) {
    binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      viewportEl = $$value;
      $$invalidate(2, viewportEl);
    });
  }

  $$self.$$set = $$new_props => {
    $$invalidate(33, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    $$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
    if ('cameraClass' in $$new_props) $$invalidate(0, cameraClass = $$new_props.cameraClass);
    if ('hideBeforeInit' in $$new_props) $$invalidate(11, hideBeforeInit = $$new_props.hideBeforeInit);
    if ('firstPanelSize' in $$new_props) $$invalidate(12, firstPanelSize = $$new_props.firstPanelSize);
    if ('options' in $$new_props) $$invalidate(1, options = $$new_props.options);
    if ('plugins' in $$new_props) $$invalidate(13, plugins = $$new_props.plugins);
    if ('status' in $$new_props) $$invalidate(14, status = $$new_props.status);
    if ('vanillaFlicking' in $$new_props) $$invalidate(10, vanillaFlicking = $$new_props.vanillaFlicking);
    if ('$$scope' in $$new_props) $$invalidate(18, $$scope = $$new_props.$$scope);
  };

  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] &
    /*renderCounter*/
    131072) {
      $$invalidate(8, renderCounterComputed = renderCounter);
    }

    {
      $$invalidate(4, panelsPerView = $$invalidate(15, _a = options.panelsPerView) !== null && _a !== void 0 ? _a : -1);
      $$invalidate(5, isHorizontal = options.horizontal != null ? options.horizontal : true);
      $$invalidate(0, cameraClass = `flicking-camera ${$$invalidate(16, _b = $$props.cameraClass) !== null && _b !== void 0 ? _b : ""}`.trim());
      $$invalidate(6, isHiddenBeforeInit = hideBeforeInit && !(vanillaFlicking && vanillaFlicking.initialized));
      $$invalidate(7, cameraTransform = !(vanillaFlicking && vanillaFlicking.initialized) && firstPanelSize ? {
        style: `transform: ${VanillaFlicking.getDefaultCameraTransform(options.align, options.horizontal, firstPanelSize)}`
      } : {}); // On props change

      if (vanillaFlicking) {
        const newOptions = __rest(options, ["virtual"]); // Omit 'virtual', as it can't have any setter


        for (const key in newOptions) {
          if (key in vanillaFlicking && vanillaFlicking[key] !== newOptions[key]) {
            $$invalidate(10, vanillaFlicking[key] = newOptions[key], vanillaFlicking);
          }
        }
      }
    }
  };

  $$props = exclude_internal_props($$props);
  return [cameraClass, options, viewportEl, cameraEl, panelsPerView, isHorizontal, isHiddenBeforeInit, cameraTransform, renderCounterComputed, $$restProps, vanillaFlicking, hideBeforeInit, firstPanelSize, plugins, status, _a, _b, renderCounter, $$scope, slots, div0_binding, div1_binding];
}

class Flicking extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance$1, create_fragment$1, safe_not_equal, {
      cameraClass: 0,
      hideBeforeInit: 11,
      firstPanelSize: 12,
      options: 1,
      plugins: 13,
      status: 14,
      vanillaFlicking: 10
    }, null, [-1, -1]);
  }

  get cameraClass() {
    return this.$$.ctx[0];
  }

  set cameraClass(cameraClass) {
    this.$$set({
      cameraClass
    });
    flush();
  }

  get hideBeforeInit() {
    return this.$$.ctx[11];
  }

  set hideBeforeInit(hideBeforeInit) {
    this.$$set({
      hideBeforeInit
    });
    flush();
  }

  get firstPanelSize() {
    return this.$$.ctx[12];
  }

  set firstPanelSize(firstPanelSize) {
    this.$$set({
      firstPanelSize
    });
    flush();
  }

  get options() {
    return this.$$.ctx[1];
  }

  set options(options) {
    this.$$set({
      options
    });
    flush();
  }

  get plugins() {
    return this.$$.ctx[13];
  }

  set plugins(plugins) {
    this.$$set({
      plugins
    });
    flush();
  }

  get status() {
    return this.$$.ctx[14];
  }

  set status(status) {
    this.$$set({
      status
    });
    flush();
  }

  get vanillaFlicking() {
    return this.$$.ctx[10];
  }

  set vanillaFlicking(vanillaFlicking) {
    this.$$set({
      vanillaFlicking
    });
    flush();
  }

}

var SvelteFlicking = Flicking;

/*
 * Copyright (c) 2015 NAVER Corp.
 * egjs projects are licensed under the MIT license
 */

if (SvelteFlicking.prototype) {
  VanillaFlicking.withFlickingMethods(SvelteFlicking.prototype, "vanillaFlicking");
}

// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

function validate(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return stringify(rnds);
}

/* src/flicking-panel.svelte generated by Svelte v3.46.2 */

function create_if_block(ctx) {
  let div;
  let div_style_value;
  let current;
  const default_slot_template =
  /*#slots*/
  ctx[8].default;
  const default_slot = create_slot(default_slot_template, ctx,
  /*$$scope*/
  ctx[7], null);
  let div_levels = [{
    "data-key":
    /*id*/
    ctx[3]
  }, {
    class: "flicking-panel"
  }, {
    style: div_style_value = "order: " +
    /*order*/
    ctx[1]
  },
  /*$$restProps*/
  ctx[4]];
  let div_data = {};

  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }

  return {
    c() {
      div = element("div");
      if (default_slot) default_slot.c();
      set_attributes(div, div_data);
    },

    m(target, anchor) {
      insert(target, div, anchor);

      if (default_slot) {
        default_slot.m(div, null);
      }
      /*div_binding*/


      ctx[9](div);
      current = true;
    },

    p(ctx, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty &
        /*$$scope*/
        128)) {
          update_slot_base(default_slot, default_slot_template, ctx,
          /*$$scope*/
          ctx[7], !current ? get_all_dirty_from_scope(
          /*$$scope*/
          ctx[7]) : get_slot_changes(default_slot_template,
          /*$$scope*/
          ctx[7], dirty, null), null);
        }
      }

      set_attributes(div, div_data = get_spread_update(div_levels, [{
        "data-key":
        /*id*/
        ctx[3]
      }, {
        class: "flicking-panel"
      }, (!current || dirty &
      /*order*/
      2 && div_style_value !== (div_style_value = "order: " +
      /*order*/
      ctx[1])) && {
        style: div_style_value
      }, dirty &
      /*$$restProps*/
      16 &&
      /*$$restProps*/
      ctx[4]]));
    },

    i(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },

    o(local) {
      transition_out(default_slot, local);
      current = false;
    },

    d(detaching) {
      if (detaching) detach(div);
      if (default_slot) default_slot.d(detaching);
      /*div_binding*/

      ctx[9](null);
    }

  };
}

function create_fragment(ctx) {
  let if_block_anchor;
  let current;
  let if_block = !
  /*hidden*/
  ctx[0] && create_if_block(ctx);
  return {
    c() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },

    m(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },

    p(ctx, [dirty]) {
      if (!
      /*hidden*/
      ctx[0]) {
        if (if_block) {
          if_block.p(ctx, dirty);

          if (dirty &
          /*hidden*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },

    i(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },

    o(local) {
      transition_out(if_block);
      current = false;
    },

    d(detaching) {
      if (if_block) if_block.d(detaching);
      if (detaching) detach(if_block_anchor);
    }

  };
}

function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["show", "hide"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let {
    $$slots: slots = {},
    $$scope
  } = $$props;
  const id = v4();
  const sveltePanels = svelte.getContext("panels");
  let hidden = false;
  let order = Number.MAX_SAFE_INTEGER;
  let element;
  sveltePanels.add({
    show,
    hide,
    id,

    setOrder(newOrder) {
      $$invalidate(1, order = newOrder);
    },

    rendered() {
      return !hidden;
    },

    nativeElement() {
      return element;
    }

  });
  svelte.onDestroy(() => {
    sveltePanels.remove(id);
  });

  function show() {
    $$invalidate(0, hidden = false);
  }

  function hide() {
    $$invalidate(0, hidden = true);
  }

  function div_binding($$value) {
    binding_callbacks[$$value ? 'unshift' : 'push'](() => {
      element = $$value;
      $$invalidate(2, element);
    });
  }

  $$self.$$set = $$new_props => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(4, $$restProps = compute_rest_props($$props, omit_props_names));
    if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
  };

  return [hidden, order, element, id, $$restProps, show, hide, $$scope, slots, div_binding];
}

class Flicking_panel extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment, safe_not_equal, {
      show: 5,
      hide: 6
    });
  }

  get show() {
    return this.$$.ctx[5];
  }

  get hide() {
    return this.$$.ctx[6];
  }

}

var FlickingPanel = Flicking_panel;

/*
 * Copyright (c) 2015 NAVER Corp.
 * egjs projects are licensed under the MIT license
 */
SvelteFlicking.FlickingPanel = FlickingPanel;

module.exports = SvelteFlicking;
//# sourceMappingURL=flicking.cjs.js.map
