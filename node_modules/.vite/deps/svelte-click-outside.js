import "./chunk-X7HCJ7ZS.js";
import "./chunk-IUR3YJLY.js";
import {
  SvelteComponentDev,
  add_location,
  binding_callbacks,
  children,
  claim_element,
  claim_space,
  createEventDispatcher,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  get_all_dirty_from_scope,
  get_slot_changes,
  init,
  insert_hydration_dev,
  listen_dev,
  safe_not_equal,
  space,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-SO7WH7Z5.js";
import "./chunk-LJNQQEZP.js";
import "./chunk-Y4AOG3KG.js";

// node_modules/svelte-click-outside/src/index.svelte
var file = "C:/Users/harsh/OneDrive/Documents/New folder/Discentium-net/node_modules/svelte-click-outside/src/index.svelte";
function create_fragment(ctx) {
  let t;
  let div;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    null
  );
  const block = {
    c: function create() {
      t = space();
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      t = claim_space(nodes);
      div = claim_element(nodes, "DIV", {});
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      add_location(div, file, 31, 0, 549);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, t, anchor);
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[5](div);
      current = true;
      if (!mounted) {
        dispose = listen_dev(
          document.body,
          "click",
          /*onClickOutside*/
          ctx[1],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t);
        detach_dev(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[5](null);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Src", slots, ["default"]);
  let { exclude = [] } = $$props;
  let child;
  const dispatch = createEventDispatcher();
  function isExcluded(target) {
    var parent = target;
    while (parent) {
      if (exclude.indexOf(parent) >= 0 || parent === child) {
        return true;
      }
      parent = parent.parentNode;
    }
    return false;
  }
  function onClickOutside(event) {
    if (!isExcluded(event.target)) {
      dispatch("clickoutside");
    }
  }
  const writable_props = ["exclude"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Src> was created with unknown prop '${key}'`);
  });
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      child = $$value;
      $$invalidate(0, child);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("exclude" in $$props2)
      $$invalidate(2, exclude = $$props2.exclude);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    createEventDispatcher,
    exclude,
    child,
    dispatch,
    isExcluded,
    onClickOutside
  });
  $$self.$inject_state = ($$props2) => {
    if ("exclude" in $$props2)
      $$invalidate(2, exclude = $$props2.exclude);
    if ("child" in $$props2)
      $$invalidate(0, child = $$props2.child);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [child, onClickOutside, exclude, $$scope, slots, div_binding];
}
var Src = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { exclude: 2 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Src",
      options,
      id: create_fragment.name
    });
  }
  get exclude() {
    throw new Error("<Src>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set exclude(value) {
    throw new Error("<Src>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var src_default = Src;
export {
  src_default as default
};
//# sourceMappingURL=svelte-click-outside.js.map
