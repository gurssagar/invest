import { SvelteComponentTyped } from "svelte";
import type { ArrowsEventDetail, EventDetail, MoveEventDetail, SlideEventDetail } from '../../types';
import type { ComponentConstructor, Options, PaginationData, PaginationItem, SlideComponent } from '@splidejs/splide';
import { Splide } from '@splidejs/splide';
declare const __propDef: {
    props: {
        [x: string]: any;
        class?: string | undefined;
        options?: Options;
        splide?: Splide | undefined;
        extensions?: Record<string, ComponentConstructor> | undefined;
        transition?: ComponentConstructor | undefined;
        hasTrack?: boolean;
        go?: (control: number | string) => void;
        sync?: (target: Splide) => void;
    };
    events: {
        mounted: CustomEvent<EventDetail<Record<string, unknown>>>;
        destroy: CustomEvent<EventDetail<Record<string, unknown>>>;
        active: CustomEvent<SlideEventDetail>;
        arrowsMounted?: CustomEvent<ArrowsEventDetail>;
        arrowsUpdated?: CustomEvent<ArrowsEventDetail>;
        autoplayPause?: CustomEvent<EventDetail<Record<string, unknown>>>;
        autoplayPlay?: CustomEvent<EventDetail<Record<string, unknown>>>;
        autoplayPlaying?: CustomEvent<EventDetail<{
            rate: number;
        }>>;
        click?: CustomEvent<SlideEventDetail>;
        drag?: CustomEvent<EventDetail<Record<string, unknown>>>;
        dragged?: CustomEvent<EventDetail<Record<string, unknown>>>;
        dragging?: CustomEvent<EventDetail<Record<string, unknown>>>;
        hidden?: CustomEvent<SlideEventDetail>;
        inactive?: CustomEvent<SlideEventDetail>;
        lazyloadLoaded?: CustomEvent<EventDetail<{
            img: HTMLImageElement;
            Slide: SlideComponent;
        }>>;
        move?: CustomEvent<MoveEventDetail>;
        moved?: CustomEvent<MoveEventDetail>;
        navigationMounted?: CustomEvent<EventDetail<{
            splides: Splide[];
        }>>;
        paginationMounted?: CustomEvent<EventDetail<{
            data: PaginationData;
            item: PaginationItem;
        }>>;
        paginationUpdated?: CustomEvent<EventDetail<{
            data: PaginationData;
            prev: PaginationItem;
            curr: PaginationItem;
        }>>;
        refresh?: CustomEvent<EventDetail<Record<string, unknown>>>;
        resize?: CustomEvent<EventDetail<Record<string, unknown>>>;
        resized?: CustomEvent<EventDetail<Record<string, unknown>>>;
        scroll?: CustomEvent<EventDetail<Record<string, unknown>>>;
        scrolled?: CustomEvent<EventDetail<Record<string, unknown>>>;
        updated?: CustomEvent<EventDetail<{
            options: Options;
        }>>;
        visible?: CustomEvent<SlideEventDetail>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export declare type SplideProps = typeof __propDef.props;
export declare type SplideEvents = typeof __propDef.events;
export declare type SplideSlots = typeof __propDef.slots;
export default class Splide extends SvelteComponentTyped<SplideProps, SplideEvents, SplideSlots> {
    get go(): (control: string | number) => void;
    get sync(): (target: Splide) => void;
    get class(): string;
    /**accessor*/
    set class(_: string);
    get options(): Options;
    /**accessor*/
    set options(_: Options);
    get splide(): Splide;
    /**accessor*/
    set splide(_: Splide);
    get extensions(): Record<string, ComponentConstructor>;
    /**accessor*/
    set extensions(_: Record<string, ComponentConstructor>);
    get transition(): ComponentConstructor;
    /**accessor*/
    set transition(_: ComponentConstructor);
    get hasTrack(): boolean;
    /**accessor*/
    set hasTrack(_: boolean);
    get undefined(): any;
    /**accessor*/
    set undefined(_: any);
    get undefined(): any;
    /**accessor*/
    set undefined(_: any);
}
export {};
